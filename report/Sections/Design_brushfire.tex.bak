\documentclass[../Head/Main.tex]{subfiles}
\begin{document}
\subsection{Model based planer}

The brushfire algorithm uses a grid to approximate distance to obstacles. The idea is to give obstacles a starting value of 1 and free-space pixels a value of 0. Then continue until the $'fire'$ has consumed all free pixels thereby giving pixels furthest away from obstacles the highest value. It was decided to use a eight-point connectivity grid. Pseudo code for the implementation of the brushfire algorithm is giving below.          

\begin{Pseudo}{Brushfire algorithm}{}

	\textbf{while} True \textbf{do}
	

	\begin{Indentation}
	\item $label$++
	\begin{Indentation}

	\item for all \textit{i} hight of image 
	\begin{Indentation}
	\item for all \textit{j} width of image 
	\item if adjacent pixel values to image($i, j $) is zero set image($i, j $) to \textit{label} + 1	
	
	\end{Indentation}
	
	\item \textbf{until}
				
	\begin{itemize}
	\item All pixels have an assigned value 
	\end{itemize}

	\end{Indentation}
	
	 \item end \textbf{while}

	\end{Indentation}
	
\end{Pseudo}

The reason for choosing this algorithm is that it gives a set of values to the pixels furthest away from the obstacles, which can be used to generate a path for the robot by picking out the pixels that leads to a complete road map for the robot to navigate through the entire map. 
\item 
By using the brushfire algorithm as described above it is possible to get information about certain points of the map with the highest value. Now by looking a the corners and center lines generated by the brushfire algorithm one can get the desired values. The idea here is the use a 4-point connectivity where each image($i,j$) value is compared to its neighbours   



\end{document}