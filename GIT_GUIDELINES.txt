This file contains guidelines to GIT

CHECK IF BRANCH IS UP TO DATE WITH MASTER
    git remote -v update

COMMIT CHANGES
    <make sure you are in the right branch>
    git status #will tell which files are modified or not tracked
    ADDING FILES    
	git add <modified or nontracked files>
    REMOVING FILES
	git rm <files to be removed>    
    git commit -m "comment" <modified or nontracked files>
    git push origin yourBranchName

GET CHANGES FROM BRANCH
    git pull origin yourBranchName

GET CHANGES FROM MASTER
    git checkout yourBranchName
    git fetch origin master
    git rebase origin/master
    (if merge conflicts occur do following)
        <solve merge conflicts>
	    (often you can just delete conflicts from conflicted files)
        git add <conflicted files>
    	git rebase --continue

CREATE BRANCH
    git branch yourBranchName
    git checkout yourBranchName

MERGE BRANCH TO MASTER (MASTER IS AHEAD OF YOUR BRANCH)
    git checkout yourBranchName
    git fetch origin master
    git rebase origin/master
    (if merge conflicts occur do following)
        <solve merge conflicts>
	    (often you can just delete conflicts from conflicted files)
        git add <conflicted files>
    	git rebase --continue
    git checkout master
    git merge yourBranchName
    git push origin master

MERGE BRANCH TO MASTER (YOUR BRANCH IS AHEAD OF MASTER)
    git checkout master
    git merge yourBranchName
    git push origin master

DELETE BRANCH
    git branch -d yourBranchName #deletes your local branch
    git push origin --delete yourBranchName #deletes remote branch (GITHub)

USEFULL COMMANDS
    git merge --abort #aborts the merge 
	- usefull if there are merge conflicts

    git push --force-with-lease origin yourBranchName 
	- forces the changes on local to be on remote 
	- needed if you get new changes from master 
	- deletes old history and replaces with new one
	- normally not recomended 

   git <command> --abort
	- aborts the command 
	- for example git merge --abort (aborts the merge)
